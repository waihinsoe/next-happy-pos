generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addon_categories {
  id                     Int                      @id @default(autoincrement())
  name                   String
  is_required            Boolean
  addons                 addons[]
  menus_addon_categories menus_addon_categories[]
}

model addons {
  id                  Int               @id @default(autoincrement())
  name                String
  price               Int
  addon_categories_id Int?
  addon_categories    addon_categories? @relation(fields: [addon_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id        Int         @id @default(autoincrement())
  name      String
  address   String?
  locations locations[]
  users     users[]
}

model locations {
  id                              Int                               @id @default(autoincrement())
  name                            String
  companies_id                    Int?
  address                         String
  companies                       companies?                        @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus_menu_categories_locations menus_menu_categories_locations[]
}

model menu_categories {
  id                              Int                               @id @default(autoincrement())
  name                            String
  menus_menu_categories_locations menus_menu_categories_locations[]
}

model menus {
  id                              Int                               @id @default(autoincrement())
  name                            String
  price                           Int
  asset_url                       String?
  description                     String?
  menus_addon_categories          menus_addon_categories[]
  menus_menu_categories_locations menus_menu_categories_locations[]
}

model menus_addon_categories {
  id                  Int               @id @default(autoincrement())
  menus_id            Int?
  addon_categories_id Int?
  addon_categories    addon_categories? @relation(fields: [addon_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus               menus?            @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menus_addon_categories_meuns_id_fkey")
}

model menus_menu_categories_locations {
  id                 Int              @id @default(autoincrement())
  menus_id           Int?
  locations_id       Int
  menu_categories_id Int              
  is_available       Boolean?         @default(true)
  locations          locations       @relation(fields: [locations_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_categories    menu_categories @relation(fields: [menu_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus              menus?          @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model test {
  id          Int     @id @default(autoincrement())
  is_availabe Boolean
}

model users {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  password     String
  companies_id Int?
  role         Role
  companies    companies? @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  user
  admin
}
